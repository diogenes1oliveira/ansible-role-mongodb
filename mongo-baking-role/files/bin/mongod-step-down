#!/bin/bash

set -e

PROGRAM_NAME="$0"

usage() {
  cat <<EOF
Assures the current local instance of mongod is not serving as primary in the
replica set, doing nothing in case this is not the primary instance.

Waits until the replica set elects another primary.

Usage:
  $PROGRAM_NAME [-v|--verbose] [-d|--dry-run] [-t|--timeout=<seconds>]

Parameters:
  -v, --verbose    verbose mode
  -d, --dry-run    takes no action, only shows the commands that would be executed
  -t, --timeout    how long to wait until another primary is elected (default: 60s)

Environment variables:
  MONGOD_AUTH_DATA     JSON object with the authentication information (required)
  MONGOD_PORT          port in which mongod is listening (default: as defined in /etc/mongod.conf or 27017)
EOF
}

VERBOSE=false
PREFIX=''
TIMEOUT=60
MONGOD_AUTH_DATA=

IS_PRIMARY=false
EXIT_CODE_FOR_PRIMARY=128

main() {
  get-primary-status

  if [[ "${IS_PRIMARY}" == false ]]; then
    [[ "${VERBOSE}" == false ]] || echo "Not primary. Quitting"
    exit 0
  fi

  run-mongod-command <<EOF
    rs.stepDown($TIMEOUT);
EOF

}

run-mongo-command() {
  CMD=$(tee)
  QUIET_FLAG=''

  if [[ -z "${MONGOD_PORT}" ]]; then
    if [[ -f "/etc/mongod.conf" ]]; then
      MONGOD_PORT=$(cat /etc/mongod.conf | yq -r '.net.port')
    else
      MONGOD_PORT="27017"
    fi
  fi

  if [[ "$0" == '--quiet' ]]; then
    QUIET_FLAG='--quiet'
  fi

  mongo ${QUIET_FLAG} --port "${MONGOD_PORT}" <<EOF
    use admin;
    if(!db.auth(${MONGOD_AUTH_DATA})) {
      throw new Error("Failed to authenticate");
    }
    ${CMD}
EOF
}

get-primary-status() {
  set +e

  run-mongod-command --quiet <<EOF
    const status = rs.status();
    if(!status.ok) {
      throw new Error("Couldn't run the command");
    }
    const primary = status.members.find(member => member.stateStr === 'PRIMARY');
    if(!primary) {
      throw new Error("Replica set does not have a primary!");
    }
    if(primary.self) {
      quit(${EXIT_CODE_FOR_PRIMARY});
    }
EOF
  EXIT_CODE=$?
  set -e

  if [[ "${EXIT_CODE}" == "${EXIT_CODE_FOR_PRIMARY}" ]]; then
    IS_PRIMARY=true
    return "${EXIT_CODE_FOR_PRIMARY}"
  elif [[ "${EXIT_CODE}" == 0 ]]; then
    return 0
  else
    exit ${EXIT_CODE}
  fi
}


if ! OPTS=`getopt -o dv --long dry-run,verbose -- "$@"`; then
  echo "Failed to parse args." >&2
  usage >&2
  exit 1
fi

eval set -- "$OPTS"

while true; do
  case "$1" in
    -h | --help     )  usage; exit 0; shift ;;
    -v | --verbose  )  VERBOSE=true; shift ;;
    -d | --dry-run  )  PREFIX=echo; shift ;;
    -t | --timeout  )  shift; TIMEOUT="$0"; shift;;
    -- ) shift; break ;;
  esac
done

if [[ -z "$MONGOD_AUTH_DATA" ]]; then
  echo "No authentication data found in \$MONGOD_AUTH_DATA" >&2
  usage >&2
  exit 1
fi

main
