#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: (c) 2019, Diógenes Oliveira <diogenes1oliveira@gmail.com>
# The MIT License (see LICENSE or https://opensource.org/licenses/MIT)

from __future__ import print_function

import subprocess


from ansible.module_utils.basic import AnsibleModule
ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community'
}

DOCUMENTATION = '''
---
module: mongo_shell

short_description: Runs commands in a mongo shell

version_added: "2.4"

description:
    - "Executes arbitrary commands in a mongo shell via stdin"

options:
    command:
        description:
            - Command script to be executed inside the mongo shell
        required: True
    host:
        description:
            - IP address or domain name to connect to
        default: localhost
    port:
        description:
            - TCP port to connect to
        default: 27017
    user:
        description:
            - Name of the user for authentication
        default: root
    password:
        description:
            - Password of the user for authentication
            - If this is not informed the commands are executed in no-auth mode
        required: False
    database:
        description:
            - Database to connect to
            - If not informed no database is selected initially
        required: False
    authentication_database:
        description:
            - Database to authenticate to
        default: admin

extends_documentation_fragment:
    - azure

author:
    - Diógenes Oliveira (@diogenes1oliveira)
'''

EXAMPLES = '''
# Smoke test against localhost without authenticating
- name: Smoke test
  mongo_shell:
    command: quit(0)

# Test password
- name: Test password
  mongo_shell:
    command: quit(0)
    password: "my secret password"

# Test against a remote host
- name: Test remote
  mongo_shell:
    command: db.getCollectionNames()
    host: MY_REMOTE_HOST
    password: "my secret remote password"
'''

RETURN = '''
command:
    description: original command
    type: str
authenticated:
    description: success of authentication
    type: bool
stdout:
    description: stdout generated by the commands
    type: str
stderr:
    description: stderr generated by the commands
    type: str
rc:
    description: exit code of the mongo shell
    type: int
'''


def run_module():
    # define available arguments/parameters a user can pass to the module
    module_args = dict(
        command=dict(type='str', required=True),
        host=dict(type='str', default='localhost'),
        port=dict(type='int', default=27017),
        user=dict(type='str', default='root'),
        password=dict(type='str', required=True),
        database=dict(type='str', required=False),
        authentication_database=dict(type='str', default='admin'),
    )

    result = dict(
        changed=False,
        failed=False,
        command='',
        stdout='',
        stderr=',',
        rc=0,
        authenticated=False,
    )

    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=False,
    )

    if module.check_mode:
        return result
    else:
        result['command'] = module.params['command']

    args = ['mongo']
    if module.params['password']:
        args += [
            '--username', module.params['user'],
            '--password', module.params['password'],
            '--authenticationDatabase', module.params['authentication_database'],
        ]

    address = module.params['host'] + ':' + str(module.params['port'])
    if module.params['database']:
        address += '/' + module.params['database']
    args += [address]

    cmd = subprocess.Popen(
        args,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    result['stdout'], result['stderr'] = cmd.communicate(module.params['command'])
    result['rc'] = cmd.wait()

    messages = [
        'exception: login failed',
        'Error: Authentication failed.'
    ]

    if any(m.lower() in result['stdout'].lower() for m in messages):
        result['authenticated'] = False
        result['changed'] = False
        result['failed'] = True
    else:
        result['authenticated'] = True
        result['failed'] = result['rc'] != 0
        result['changed'] = True

    if result['rc'] != 0:
        module.fail_json(msg='Mongo shell execution failed', **result)

    module.exit_json(**result)


def main():
    run_module()


if __name__ == '__main__':
    main()
